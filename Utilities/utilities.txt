#Basis Set

basis
  * library def2-svpd
end
---------------------------
#Iodine basis 

ecp
 I library "def2-ecp" 
end
--------------------------
#XYZ output

driver
 default 
 maxiter 99
 xyz <name>
end
--------------------------
#Geometry constraint

geometry adjust
        zcoord
            bond 1 3 3.000 cccc constant
	end
end
-------------------------------------------
#Python block for LIIC	 

python
from nwgeom import *
geom = ''' 
    geometry noprint adjust
        zcoord
            bond  1 3   %f cc  constant
            bond  2 3   %f cc  constant
        end
    end 
'''

x0=<value>
y0=<value>
xmax=<value>
ymax=<value>
npts=<value>

xmin = x0 - (xmax-x0)/npts
ymin = y0 - (ymax-y0)/npts

results = scan_input(geom, \
[xmin, ymin], 
[xmax,   ymax],
npts, 'dft', task_optimize)

fp=open("pes_liic.dat","w")
for i in range(0,len(results)):
    fp.write(f'{results[i][0][0]} {results[i][0][1]}  {results[i][1]} \n')
fp.close()

end
task python
---------------------------------------------------------------------------------
#Python block for 2D PES

python
from pes_scan import pes_scan
geom = ''' 
    geometry noprint adjust
        zcoord
            bond  1 3   %f cc  constant
            bond  2 3   %f cc  constant
        end
    end 
'''

x0=<value>
y0=<value>
xmax=<value>
ymax=<value>
npts=<value>

xmin = x0 - (xmax-x0)/npts
ymin = y0 - (ymax-y0)/npts

results = pes_scan(geom, \
[xmin, ymin], 
[xmax,  ymax],
npts, 'dft', task_optimize)

fp=open("pes2d.dat","w")
fp.write(f'# {npts} {npts}  \n')
for i in range(0,len(results)):
    fp.write(f'{results[i][0][0]} {results[i][0][1]}  {results[i][1]} \n')
fp.close()

end
task python
